// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/promo/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "simplecheckout/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(e *entity.Promo) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockRepository) Get(id string) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), id)
}

// GetBySKU mocks base method.
func (m *MockRepository) GetBySKU(sku string) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySKU", sku)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySKU indicates an expected call of GetBySKU.
func (mr *MockRepositoryMockRecorder) GetBySKU(sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySKU", reflect.TypeOf((*MockRepository)(nil).GetBySKU), sku)
}

// List mocks base method.
func (m *MockRepository) List() ([]*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// Update mocks base method.
func (m *MockRepository) Update(e *entity.Promo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), e)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreatePromo mocks base method.
func (m *MockUseCase) CreatePromo(sku, scheme, freebieSKU string, minQty, payOnly, percentageOff int) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromo", sku, scheme, freebieSKU, minQty, payOnly, percentageOff)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromo indicates an expected call of CreatePromo.
func (mr *MockUseCaseMockRecorder) CreatePromo(sku, scheme, freebieSKU, minQty, payOnly, percentageOff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromo", reflect.TypeOf((*MockUseCase)(nil).CreatePromo), sku, scheme, freebieSKU, minQty, payOnly, percentageOff)
}

// CreatePromoBuy1Get1 mocks base method.
func (m *MockUseCase) CreatePromoBuy1Get1(sku, freebies string) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromoBuy1Get1", sku, freebies)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromoBuy1Get1 indicates an expected call of CreatePromoBuy1Get1.
func (mr *MockUseCaseMockRecorder) CreatePromoBuy1Get1(sku, freebies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromoBuy1Get1", reflect.TypeOf((*MockUseCase)(nil).CreatePromoBuy1Get1), sku, freebies)
}

// CreatePromoBuyMinXOffY mocks base method.
func (m *MockUseCase) CreatePromoBuyMinXOffY(sku string, minqty, percentageoff int) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromoBuyMinXOffY", sku, minqty, percentageoff)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromoBuyMinXOffY indicates an expected call of CreatePromoBuyMinXOffY.
func (mr *MockUseCaseMockRecorder) CreatePromoBuyMinXOffY(sku, minqty, percentageoff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromoBuyMinXOffY", reflect.TypeOf((*MockUseCase)(nil).CreatePromoBuyMinXOffY), sku, minqty, percentageoff)
}

// CreatePromoBuyXPayY mocks base method.
func (m *MockUseCase) CreatePromoBuyXPayY(sku string, minqty, payonly int) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromoBuyXPayY", sku, minqty, payonly)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromoBuyXPayY indicates an expected call of CreatePromoBuyXPayY.
func (mr *MockUseCaseMockRecorder) CreatePromoBuyXPayY(sku, minqty, payonly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromoBuyXPayY", reflect.TypeOf((*MockUseCase)(nil).CreatePromoBuyXPayY), sku, minqty, payonly)
}

// DeletePromo mocks base method.
func (m *MockUseCase) DeletePromo(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePromo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePromo indicates an expected call of DeletePromo.
func (mr *MockUseCaseMockRecorder) DeletePromo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromo", reflect.TypeOf((*MockUseCase)(nil).DeletePromo), id)
}

// GetPromo mocks base method.
func (m *MockUseCase) GetPromo(id string) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromo", id)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromo indicates an expected call of GetPromo.
func (mr *MockUseCaseMockRecorder) GetPromo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromo", reflect.TypeOf((*MockUseCase)(nil).GetPromo), id)
}

// GetPromoBySKU mocks base method.
func (m *MockUseCase) GetPromoBySKU(sku string) (*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromoBySKU", sku)
	ret0, _ := ret[0].(*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromoBySKU indicates an expected call of GetPromoBySKU.
func (mr *MockUseCaseMockRecorder) GetPromoBySKU(sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromoBySKU", reflect.TypeOf((*MockUseCase)(nil).GetPromoBySKU), sku)
}

// ListPromos mocks base method.
func (m *MockUseCase) ListPromos() ([]*entity.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromos")
	ret0, _ := ret[0].([]*entity.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPromos indicates an expected call of ListPromos.
func (mr *MockUseCaseMockRecorder) ListPromos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromos", reflect.TypeOf((*MockUseCase)(nil).ListPromos))
}

// UpdatePromo mocks base method.
func (m *MockUseCase) UpdatePromo(e *entity.Promo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePromo", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePromo indicates an expected call of UpdatePromo.
func (mr *MockUseCaseMockRecorder) UpdatePromo(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePromo", reflect.TypeOf((*MockUseCase)(nil).UpdatePromo), e)
}
